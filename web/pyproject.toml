[tool.poetry]
name = "unofficial-vfsc-scraper"
version = "0.1.0"
description = "Scraper of companies information from VFSC"
authors = ["Michael Toohig <michaeltoohig@gmail.com"]
maintainers = ["Michael Toohig <michaeltoohig@gmail.com>"]
license = "MIT"
readme = "README.md"


[tool.poetry.dependencies]
python = "~3.11"
flask = "<3.1"
markdown = "^3.4.4"
pygments = "^2.16.1"
networkx = "^3.3"
flask-caching = "^2.3.0"
loguru = "^0.7.2"

[tool.poetry.group.test.dependencies]
dash = { extras = ["testing"], version = "^2.13.0" }
pytest = "^7.4.2"
pytest-mock = "^3.11.1"
pytest-cov = "^4.1.0"


[tool.poetry.group.dev.dependencies]
black = "^23.9.1"
pre-commit = "^3.4.0"
ruff = "^0.0.291"


[tool.pytest.ini_options]
minversion = "7.0"
addopts = ["-ra", "-q"]
testpaths = ["tests"]
cache_dir = "/tmp/pytest_cache"


[tool.black]
include = '\.pyi?$'
line-length = 88
target-version = ["py310"]


[tool.ruff]
select = [
  "E",
  "F",
  "W",   # flake8
  "B",   # flake8-bugbear
  "I",   # isort
  "ARG", # flake8-unused-arguments
  "C4",  # flake8-comprehensions
  "EM",  # flake8-errmsg
  "ICN", # flake8-import-conventions
  "ISC", # flake8-implicit-str-concat
  "G",   # flake8-logging-format
  "PGH", # pygrep-hooks
  "PIE", # flake8-pie
  "PL",  # pylint
  "PT",  # flake8-pytest-style
  "PTH", # flake8-use-pathlib
  "RET", # flake8-return
  "RUF", # Ruff-specific
  "SIM", # flake8-simplify
  "T20", # flake8-print
  "UP",  # pyupgrade
  "YTT", # flake8-2020
  "EXE", # flake8-executable
  "NPY", # NumPy specific rules
  "PD",  # pandas-vet
]
ignore = [
  "PLR", # Design related pylint codes
]
typing-modules = ["mypackage._compat.typing"]
src = ["src"]
unfixable = [
  "T20",  # Removes print statements
  "F841", # Removes unused variables
]
exclude = []
flake8-unused-arguments.ignore-variadic-names = true
line-length = 88
target-version = "py310"

[tool.ruff.isort]
force-sort-within-sections = true

[tool.ruff.per-file-ignores]
"tests/**" = ["T20"]
"__init__.py" = ["F401"]


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
